org 100h

[map all pacman.map]

%define SCREEN_WIDTH 320
%define SCREEN_HEIGHT 200


%define SPRITEW 8
%define SPRITEH 8
section .data

xPos dw 100
xVelocity dw 1
yPos dw 100

spritew dw 8

spriteh dw 8

old_XPOS dw 0

old_YPOS dw 0

currentSprite dd pacman_right_1

pacman_right_1  db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x04, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E

pacman_right_2  db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x04, 0x04, 0x04
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_right_3  db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_left_1  db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
               db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
               db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
               db 0xFF, 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
               db 0xFF, 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
               db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
               db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
               db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_left_2   db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_left_3   db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_down_1  db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
               db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
               db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
               db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
               db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
               db 0x0E, 0x0E, 0x0E, 0xFF, 0x04, 0x0E, 0x0E, 0x0E
               db 0x0E, 0x0E, 0xFF, 0xFF, 0xFF, 0x04, 0x0E, 0x0E
               db 0x0E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x0E

pacman_down_2   db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x0E, 0xFF
                db 0xFF, 0x04, 0x0E, 0x04, 0x0E, 0x0E, 0xFF, 0xFF

pacman_down_3   db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF
                db 0xFF, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0xFF, 0xFF

pacman_up_1     db 0x0E, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E
                db 0x0E, 0x0E, 0x04, 0xFF, 0xFF, 0xFF, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x04, 0xFF, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

pacman_up_2     db 0xFF, 0xFF, 0x0E, 0x0E, 0x04, 0x0E, 0x04, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x04
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF
                
pacman_up_3     db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0x0E, 0x0E, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E
                db 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04
                db 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0xFF

; ----------------------------------------------------------------------------------------------------------
; Open a file
; ----------------------------------------------------------------------------------------------------------

; .data
;     Filename db "FILE.EXT",0
;     Filehandle  dw 0 
; ----------------------------------------------------------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

section .bss
keyPressed resb 1  ; Réserve un byte pour l'état de la touche
section .text
start:
    ; Initialisation du mode vidéo
    mov ah, 00h
    mov al, 13h
    int 10h
    ; Boucle principale du jeu
    mov si, [currentSprite]

       
    
    gameloop:
    call clearScreen  ; Clear the entire screen
    call clearSprite  ; Clear the old sprite before drawing a new one
    call draw_sprite
    call read_character_key_was_pressed

    ; Delay to slow down the animation
    mov cx, 64000
    waitloop:
        loop waitloop
    jmp gameloop
    ; Fin du jeu, retour au mode texte
    mov ax, 03h
    int 10h
    mov ax, 4C00h
    int 21h


clearScreen:
    mov bx, 0xA000
    mov es, bx
    mov di, 0
    mov cx, 200*320
    rep stosb
    ret 

; Fonction pour lire la touche pressée
read_character_key_was_pressed:
    mov ah, 00h
    int 16h
    cmp ah, 0E0h
    jne handle_input
    int 16h

handle_input:
    cmp ah, 4Dh   ; Touche Droite   ;4DH
    je move_right
    cmp ah, 4Bh  ; Touche Gauche   ;4BH
    je move_left
    cmp ah, 48h  ; Touche Haut  ;48H
    je move_up
    cmp ah, 50h  ; Touche Bas  ;50h
    je move_down
    ret

    ret

clearSprite:
    mov di, [xPos]
    push ax
    mov ax, 0xA000
    mov es, ax
    pop ax
    mov dx, 8
    .eachLine:
        mov cx, 8
        rep stosb
        add di, 320-8
        dec dx
        jnz .eachLine
    ret

; ----------------------------------------------------------------------------------------------------------
; Open a file
; ----------------------------------------------------------------------------------------------------------

; OpenFile(DOS)
; mov ah, 3dh 
; mov al, 0           ; Read (1 : write, 2 : read/write)
; mov ax, cs          ; Segment base to Filename
; mov ds, ax
; mov dx, [filename]  ; 0 terminated string
; ; ds:dx = "filename.ext",0
; int 21h 
; jc .error 
; mov [filehandle], ax

; ----------------------------------------------------------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

move_right:
    call pacman_Right
    mov bx, [xPos]
    add bx, 2
    cmp bx, SCREEN_WIDTH - SPRITEW 
    jae .skip_move_right
    mov [xPos], bx
.skip_move_right:
    ret
move_left:
    call pacman_Left
    mov bx, [xPos]
    sub bx, 2
    cmp bx, 0
    jbe .skip_move_left
    mov [xPos], bx
.skip_move_left:
    ret

move_up:
    call pacman_Up
    mov bx, [yPos]
    sub bx, 2
    cmp bx, 0
    jbe .skip_move_up
    mov [yPos], bx
.skip_move_up:
    ret

move_down:
    call pacman_Down
    mov bx, [yPos]
    add bx, 2
    cmp bx, SCREEN_HEIGHT - SPRITEH 
    jae .skip_move_down
    mov [yPos], bx
.skip_move_down:
    ret


pacman_Right:
    cmp word [currentSprite], pacman_right_1
    je .pacmanRightSemiOpen
    cmp word [currentSprite], pacman_right_3
    je .pacmanRightOpen
    cmp word [currentSprite], pacman_right_2
    je .pacmanRightClose

    .pacmanRightOpen:
       mov word [currentSprite], pacman_right_1
       mov si, [currentSprite]
       ret
    .pacmanRightSemiOpen:
        mov word [currentSprite], pacman_right_2
        mov si, [currentSprite]
        ret
    .pacmanRightClose:
        mov word [currentSprite], pacman_right_3
        mov si, [currentSprite]
        ret

    pacman_Left:
    cmp word [currentSprite], pacman_left_1
    je .pacmanLeftSemiOpen
    cmp word [currentSprite], pacman_left_2
    je .pacmanLeftClose
    cmp word [currentSprite], pacman_left_3
    je .pacmanLeftOpen

    .pacmanLeftOpen:
       mov word [currentSprite], pacman_left_1
       mov si, [currentSprite]
       ret
    .pacmanLeftSemiOpen:
        mov word [currentSprite], pacman_left_2
        mov si, [currentSprite]
        ret
    .pacmanLeftClose:
        mov word [currentSprite], pacman_left_3
        mov si, [currentSprite]
        ret

    pacman_Up:
    cmp word [currentSprite], pacman_up_1
    je .pacmanUpSemiOpen
    cmp word [currentSprite], pacman_up_2
    je .pacmanUpClose
    cmp word [currentSprite], pacman_up_3
    je .pacmanUpOpen

    .pacmanUpOpen:
       mov word [currentSprite], pacman_up_1
       mov si, [currentSprite]
       ret
    .pacmanUpSemiOpen:
        mov word [currentSprite], pacman_up_2
        mov si, [currentSprite]
        ret
    .pacmanUpClose:
        mov word [currentSprite], pacman_up_3
        mov si, [currentSprite]
        ret
    
    pacman_Down:
    cmp word [currentSprite], pacman_down_1
    je .pacmanDownSemiOpen
    cmp word [currentSprite], pacman_down_2
    je .pacmanDownClose
    cmp word [currentSprite], pacman_down_3
    je .pacmanDownOpen

    .pacmanDownOpen:
       mov word [currentSprite], pacman_down_1
       mov si, [currentSprite]
       ret
    .pacmanDownSemiOpen:
        mov word [currentSprite], pacman_down_2
        mov si, [currentSprite]
        ret
    .pacmanDownClose:
        mov word [currentSprite], pacman_down_3
        mov si, [currentSprite]
        ret

; Fonction pour effacer l'écran
draw_sprite:
    ; Avant de dessiner le sprite, sauvegardez la position actuelle
    mov ax, [xPos]
    mov [old_XPOS], ax  ; Sauvegarde l'ancienne position X
    mov ax, [yPos]
    mov [old_YPOS], ax  ; Sauvegarde l'ancienne position Y
    ; Réinitialise le segment graphique
    mov ax, 0A000h
    mov es, ax
    ; Calcule l'adresse à l'écran où le sprite sera dessiné
    mov ax, [yPos]
    imul ax, 320       ; Multiplie yPos par la largeur de l'écran pour obtenir l'offset
    add ax, [xPos]     ; Ajoute xPos à l'offset
    mov di, ax         ; DI = adresse de départ pour le dessin
    ; Obtient l'adresse du sprite à dessiner
    ; Définit la hauteur du sprite
    mov cx, SPRITEH
.draw_line:
    ; Sauvegarde CX car il est modifié par REP MOVSB
    push cx
    ; Définit la largeur du sprite pour la ligne actuelle
    mov cx, SPRITEW
    rep movsb  ; Dessine la ligne du sprite à l'écran
    ; Restaure CX pour la prochaine ligne
    pop cx
    ; Ajuste DI pour la ligne suivante en prenant en compte l'offset de la largeur de l'écran
    add di, 320 - SPRITEW
    loop .draw_line  ; Répète le dessin pour chaque ligne du sprite
    ret
